name: Build
description: Find the minimum python version

inputs:
  include-prereleases:
    description: Whether to include prereleases
    required: false

outputs:
  min:
    description: Minimum python version
    value: ${{ steps.min.ouputs.version }}
  max:
    description: Maximum python version
    value: ${{ steps.max.outputs.version }}
  versions:
    description: JSON formatted list with both or only the min
    value: ${{ format('["{0}"{1}]',
                      steps.min.outputs.version,
                      steps.max.outputs.version
                      && format(',"{0}"', steps.max.outputs.version)
                      || '')}}


runs:
  using: 'composite'
  steps:
  - name: Python version
    id: min
    shell: bash
    run: |
      echo "version=$(grep -Po 'requires-python\s*=\s*"[^\"]+"' pyproject.toml \
                      | grep -Po '>=\s*\K[0-9]+(\.[0-9]+)*' \
                      | sort -V \
                      | head -n1) \
      >> "$GITHUB_OUTPUT"
  - name: Max limit
    id: max-limit
    run: |
      if [ -d tox.ini ]; then
        VERSION=$(awk '
          BEGIN { in_envlist=0 }
          /^\[.*\]/ { in_envlist=0 }  # reset on section change
          /^[[:space:]]*envlist[[:space:]]*=/ {
            in_envlist=1
            line = gensub(/^[[:space:]]*envlist[[:space:]]*=[[:space:]]*/, "", 1)
          }
          in_envlist && /^[[:space:]]+[^\[]/ {
            line = line "," $0
          }
          END {
            gsub(/[[:space:]]+/, "", line)
            split(line, a, ",")
            for (i in a) {
              if (a[i] ~ /^[0-9]+(\.[0-9]+)*$/)
                print a[i]
            }
          }
        ' tox.ini | sort -V | tail -n1)
      else
        VERSION=""
      fi

      echo "version=$VERSION" >> "$GITHUB_OUTPUT"
  - name: Max version
    uses: snok/latest-python-versions@v1
    id: gh-max
    with:
      min-version: ${{ steps.min.outputs.version }}
      max-version: ${{ steps.max-limit.outputs.version }}
      include-prereleases: ${{ inputs.include-prereleases == 'true' }}
  - name: Max version
    if: steps.gh-max.outputs.latest-python-versions
        && steps.gh-max.outputs.latest-python-versions
        != steps.min.outputs.version
    run: |
      echo "version=${{ steps.gh-max.outputs.latest-python-versions }}" \
      >> "$GITHUB_OUTPUT"
