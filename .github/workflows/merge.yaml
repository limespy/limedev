name: Merge
run-name: Merging ${{ github.event.pull_request.head.ref }} -> ${{ github.event.pull_request.base.ref }}

on:
  pull_request_review:
    types:
    - submitted

permissions:
  contents: read

jobs:
  paths:
    if: github.event.review.state == 'approved'
    uses: ./.github/workflows/paths.yaml
    with:
      paths: |
        src
        tests
        ./.github/workflows/test-functional.yaml
      before: ${{ github.event.pull_request.base.sha }}
      after: ${{ github.event.pull_request.head.sha }}
      commits: '0'

  tests:
    needs: paths
    if: needs.paths.outputs.matches
    uses: ./.github/workflows/test-functional.yaml

  package:
    needs: tests
    if: needs.tests.result == 'success'
        || needs.tests.result == 'skipped'
        && (github.event.pull_request.base.ref
            == github.event.repository.default_branch
            || github.event.pull_request.base.ref
            == 'release-candidate')
    uses: ./.github/workflows/package.yaml
    with:
        build-number: ${{ github.event.pull_request.base.ref
                          != github.event.repository.default_branch}}

  publish:
    needs: package
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    steps:
    - name: Retrieve release distributions
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.package.outputs.dists-name }}
        path: dist/
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@v1.12.4
      with:
        repository-url: |
          https://${{ github.event.pull_request.base.ref
                      != github.event.repository.default_branch
                      && 'test' || 'upload'
                      }}.pypi.org/legacy/

  merge:
    needs:
    - tests
    - publish
    if: needs.publish.result == 'success'
        || needs.publish.result == 'skipped'
        && needs.tests.result == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        sparse-checkout: |
          pyproject.toml
        sparse-checkout-cone-mode: false
    - name: Merge
      uses: lime-actions/merge@latest
      with:
        version-from: 'pyproject.toml'
    - name: Merge back
      if: github.event.pull_request.base.ref
          == github.event.repository.default_branch
      run: |
        git config user.name "GitHub Actions"
        git config user.email "github-actions@users.noreply.github.com"

        git fetch

        git checkout release-candidate
        git merge origin/${{ github.event.pull_request.base.ref }} -X ours
        git push

        git checkout dev
        git merge release-candidate -X ours
        git push
